{"version":3,"sources":["API/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","result","json","data","TodoList","allTodos","filteredTodos","updateUserId","updateTodos","className","onChange","event","target","value","filter","todo","checked","type","placeholder","title","toLowerCase","includes","toLocaleLowerCase","onClick","randomNumber","Math","floor","random","length","randomArrTodo","i","push","map","key","id","userId","CurrentUser","state","info","this","loadedData","prevProps","props","setState","name","email","phone","React","Component","App","selectedUserId","arrTodos","todos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec9c4c42.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nconst BASE_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => fetch(`${BASE_URL}${url}`)\n  .then(result => result.json())\n  .then(result => result.data);\n\nexport const getTodos = () => request(`/todos`);\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  allTodos,\n  filteredTodos,\n  updateUserId,\n  updateTodos,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__control\">\n      <select\n        className=\"TodoList__control__selected\"\n        onChange={(event) => {\n          if (event.target.value === 'All') {\n            updateTodos(allTodos);\n          }\n\n          if (event.target.value === 'active') {\n            updateTodos(allTodos.filter(todo => !todo.checked));\n          }\n\n          if (event.target.value === 'completed') {\n            updateTodos(allTodos.filter(todo => todo.checked));\n          }\n        }}\n      >\n        <option>All</option>\n        <option>active</option>\n        <option>completed</option>\n      </select>\n      <input\n        type=\"text\"\n        className=\"TodoList__control__search\"\n        placeholder=\"search for todo by name\"\n        onChange={(event) => {\n          updateTodos(allTodos.filter(todo => todo.title.toLowerCase()\n            .includes(event.target.value.toLocaleLowerCase())));\n        }}\n      />\n      <button\n        type=\"button\"\n        onClick={() => {\n          const randomNumber = Math.floor(Math.random() * allTodos.length);\n          const randomArrTodo = [];\n\n          // eslint-disable-next-line no-plusplus\n          for (let i = randomNumber; i < allTodos.length; i++) {\n            randomArrTodo.push(allTodos[i]);\n          }\n\n          // eslint-disable-next-line no-plusplus\n          for (let i = randomNumber - 1; i >= 0; i--) {\n            randomArrTodo.push(allTodos[i]);\n          }\n\n          updateTodos(randomArrTodo);\n        }}\n      >\n        Randomize\n      </button>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {filteredTodos.map(todo => (\n          <li\n            key={todo.id}\n            className=\"TodoList__item TodoList__item--unchecked\"\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.checked}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => {\n                updateUserId(`${todo.userId}`);\n              }}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  allTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  filteredTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  updateUserId: PropTypes.func.isRequired,\n  updateTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../API/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    info: {},\n  }\n\n  componentDidMount() {\n    this.loadedData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadedData();\n    }\n  }\n\n  loadedData() {\n    getUser(this.props.userId)\n      .then(info => (\n        this.setState({ info })\n      ));\n  }\n\n  render() {\n    const { info } = this.state;\n    const { updateUserId } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {info.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{info.name}</h3>\n        <p className=\"CurrentUser__email\">{info.email}</p>\n        <p className=\"CurrentUser__phone\">{info.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={() => {\n            updateUserId(0);\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.string.isRequired,\n  updateUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './API/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    allTodos: [],\n    selectedUserId: 0,\n    filteredTodos: [],\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        allTodos: todos,\n        filteredTodos: [...todos],\n      }));\n  }\n\n  updateUserId = (id) => {\n    if (id !== this.state.selectedUserId) {\n      this.setState({ selectedUserId: id });\n    }\n  }\n\n  updateTodos = (arrTodos) => {\n    this.setState({ filteredTodos: arrTodos });\n  }\n\n  render() {\n    const { allTodos, filteredTodos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            allTodos={allTodos}\n            filteredTodos={filteredTodos}\n            updateUserId={this.updateUserId}\n            updateTodos={this.updateTodos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                updateUserId={this.updateUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}